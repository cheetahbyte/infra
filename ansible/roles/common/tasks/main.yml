---
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - wget
      - ufw
      - fail2ban
    state: present

- name: Configure firewall - allow SSH
  ufw:
    rule: allow
    port: "22"
    proto: tcp

- name: Configure firewall - allow Kubernetes API
  ufw:
    rule: allow
    port: "6443"
    proto: tcp
  when: node_role == "master"

- name: Configure firewall - allow kubelet API
  ufw:
    rule: allow
    port: "10250"
    proto: tcp

- name: Configure firewall - allow NodePort services
  ufw:
    rule: allow
    port: "30000:32767"
    proto: tcp

- name: Enable firewall
  ufw:
    state: enabled
    policy: deny
    direction: incoming

- name: Disable swap permanently
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Disable swap immediately
  command: swapoff -a
  changed_when: false

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  loop:
    - br_netfilter
    - overlay

- name: Add kernel modules to load at boot
  lineinfile:
    path: /etc/modules-load.d/kubernetes.conf
    line: "{{ item }}"
    create: yes
  loop:
    - br_netfilter
    - overlay

- name: Set sysctl parameters for Kubernetes
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
    sysctl_file: /etc/sysctl.d/kubernetes.conf
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }
    - { name: 'net.ipv6.conf.all.forwarding', value: '1' }

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present

- name: Install containerd
  apt:
    name:
      - containerd.io
    state: present
    update_cache: yes

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate containerd config
  shell: containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup driver
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Restart and enable containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Add Kubernetes GPG key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
    state: present

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
    state: present

- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable and start kubelet
  systemd:
    name: kubelet
    enabled: yes
    state: started